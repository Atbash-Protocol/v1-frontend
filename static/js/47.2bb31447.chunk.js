(this["webpackJsonp@scaffold-eth/react-app"]=this["webpackJsonp@scaffold-eth/react-app"]||[]).push([[47],{499:function(e){e.exports=JSON.parse('{"address":"0xfd0610C109cb4e0079f801A190FD2dfC6A84aC50","abi":[{"inputs":[{"internalType":"address","name":"_Bash","type":"address"},{"internalType":"address","name":"_sBash","type":"address"},{"internalType":"uint32","name":"_epochLength","type":"uint32"},{"internalType":"uint256","name":"_firstEpochNumber","type":"uint256"},{"internalType":"uint32","name":"_firstEpochTime","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPulled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipPushed","type":"event"},{"inputs":[],"name":"Bash","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_recipient","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"contractBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"distributor","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"epoch","outputs":[{"internalType":"uint256","name":"number","type":"uint256"},{"internalType":"uint256","name":"distribute","type":"uint256"},{"internalType":"uint32","name":"length","type":"uint32"},{"internalType":"uint32","name":"endTime","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forfeit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"giveLockBonus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"index","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"locker","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"manager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pullManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner_","type":"address"}],"name":"pushManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rebase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceManagement","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"returnLockBonus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"sBash","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum ATBASHStaking.CONTRACTS","name":"_contract","type":"uint8"},{"internalType":"address","name":"_address","type":"address"}],"name":"setContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_warmupPeriod","type":"uint256"}],"name":"setWarmup","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_recipient","type":"address"}],"name":"stake","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"toggleDepositLock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalBonus","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bool","name":"_trigger","type":"bool"}],"name":"unstake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"warmupContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"warmupInfo","outputs":[{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"uint256","name":"gons","type":"uint256"},{"internalType":"uint256","name":"expiry","type":"uint256"},{"internalType":"bool","name":"lock","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"warmupPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"transactionHash":"0x49ac237c940aa5137d7dae3e2a881d4f483b0e61d889dfd6df0a8b56bdf6ef58","receipt":{"to":null,"from":"0x956769FC9Dae4ae9309990167937Ac6DeF306fBC","contractAddress":"0xfd0610C109cb4e0079f801A190FD2dfC6A84aC50","transactionIndex":41,"gasUsed":"1527787","logsBloom":"0xblockHash":"0xf1b21728fd26e67030b00db6d7e2f11b14e2e031f4ac0500a9c24d1803d258c0","transactionHash":"0x49ac237c940aa5137d7dae3e2a881d4f483b0e61d889dfd6df0a8b56bdf6ef58","logs":[{"transactionIndex":41,"blockNumber":15084399,"transactionHash":"0x49ac237c940aa5137d7dae3e2a881d4f483b0e61d889dfd6df0a8b56bdf6ef58","address":"0xfd0610C109cb4e0079f801A190FD2dfC6A84aC50","topics":["0xea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000956769fc9dae4ae9309990167937ac6def306fbc"],"data":"0x","logIndex":187,"blockHash":"0xf1b21728fd26e67030b00db6d7e2f11b14e2e031f4ac0500a9c24d1803d258c0"}],"blockNumber":15084399,"cumulativeGasUsed":"5780506","status":1,"byzantium":true},"args":["0x5646077E2779a4e8607A99257bD76F627A262d86","0x605d3e1De7896C29A75B4E24E42CA6D1aD703809",28800,"0",1657048731],"numDeployments":1,"solcInputHash":"1ed1fada204c36c360193582a3c5764a","metadata":"{\\"compiler\\":{\\"version\\":\\"0.7.5+commit.eb77ed08\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_Bash\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_sBash\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"_epochLength\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_firstEpochNumber\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"_firstEpochTime\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipPulled\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipPushed\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"Bash\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"claim\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"contractBalance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"distributor\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"epoch\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"number\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"distribute\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"length\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"endTime\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"forfeit\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"giveLockBonus\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"index\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"locker\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"manager\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"pullManagement\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner_\\",\\"type\\":\\"address\\"}],\\"name\\":\\"pushManagement\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"rebase\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceManagement\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"returnLockBonus\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"sBash\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"enum ATBASHStaking.CONTRACTS\\",\\"name\\":\\"_contract\\",\\"type\\":\\"uint8\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_address\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setContract\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_warmupPeriod\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"setWarmup\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_recipient\\",\\"type\\":\\"address\\"}],\\"name\\":\\"stake\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"toggleDepositLock\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalBonus\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"_trigger\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"unstake\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"warmupContract\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"warmupInfo\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"deposit\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"gons\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"lock\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"warmupPeriod\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"claim(address)\\":{\\"params\\":{\\"_recipient\\":\\"address\\"}},\\"contractBalance()\\":{\\"returns\\":{\\"_0\\":\\"uint\\"}},\\"giveLockBonus(uint256)\\":{\\"params\\":{\\"_amount\\":\\"uint\\"}},\\"index()\\":{\\"returns\\":{\\"_0\\":\\"uint\\"}},\\"returnLockBonus(uint256)\\":{\\"params\\":{\\"_amount\\":\\"uint\\"}},\\"setContract(uint8,address)\\":{\\"params\\":{\\"_contract\\":\\"address\\"}},\\"setWarmup(uint256)\\":{\\"params\\":{\\"_warmupPeriod\\":\\"uint\\"}},\\"stake(uint256,address)\\":{\\"params\\":{\\"_amount\\":\\"uint\\"},\\"returns\\":{\\"_0\\":\\"bool\\"}},\\"unstake(uint256,bool)\\":{\\"params\\":{\\"_amount\\":\\"uint\\",\\"_trigger\\":\\"bool\\"}}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"claim(address)\\":{\\"notice\\":\\"retrieve sbash from warmup\\"},\\"contractBalance()\\":{\\"notice\\":\\"returns contract bash holdings, including bonuses provided\\"},\\"forfeit()\\":{\\"notice\\":\\"forfeit sbash in warmup and retrieve bash\\"},\\"giveLockBonus(uint256)\\":{\\"notice\\":\\"provide bonus to locked staking contract\\"},\\"index()\\":{\\"notice\\":\\"returns the sbash index, which tracks rebase growth\\"},\\"rebase()\\":{\\"notice\\":\\"trigger rebase if epoch over\\"},\\"returnLockBonus(uint256)\\":{\\"notice\\":\\"reclaim bonus from locked staking contract\\"},\\"setContract(uint8,address)\\":{\\"notice\\":\\"sets the contract address for LP staking\\"},\\"setWarmup(uint256)\\":{\\"notice\\":\\"set warmup period in epoch\'s numbers for new stakers\\"},\\"stake(uint256,address)\\":{\\"notice\\":\\"stake bash to enter warmup\\"},\\"toggleDepositLock()\\":{\\"notice\\":\\"prevent new deposits to address (protection from malicious activity)\\"},\\"unstake(uint256,bool)\\":{\\"notice\\":\\"redeem sbash for bash\\"}},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/Staking.sol\\":\\"ATBASHStaking\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":800},\\"remappings\\":[]},\\"sources\\":{\\"contracts/Staking.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\nimport {IERC20} from \\\\\\"./interfaces/IERC20.sol\\\\\\";\\\\nimport {IsBash} from \\\\\\"./interfaces/IsBash.sol\\\\\\";\\\\nimport {IWarmup} from \\\\\\"./interfaces/IWarmup.sol\\\\\\";\\\\nimport {SafeERC20} from \\\\\\"./libraries/SafeERC20.sol\\\\\\";\\\\nimport {SafeMath} from \\\\\\"./libraries/SafeMath.sol\\\\\\";\\\\nimport {Address} from \\\\\\"./libraries/Address.sol\\\\\\";\\\\nimport {Ownable} from \\\\\\"./types/Ownable.sol\\\\\\";\\\\nimport {IDistributor} from \\\\\\"./interfaces/IDistributor.sol\\\\\\";\\\\n\\\\ncontract ATBASHStaking is Ownable {\\\\n    using SafeMath for uint256;\\\\n    using SafeMath for uint32;\\\\n    using SafeERC20 for IERC20;\\\\n\\\\n    address public immutable Bash;\\\\n    address public immutable sBash;\\\\n\\\\n    struct Epoch {\\\\n        uint256 number;\\\\n        uint256 distribute;\\\\n        uint32 length;\\\\n        uint32 endTime;\\\\n    }\\\\n    Epoch public epoch;\\\\n\\\\n    address public distributor;\\\\n\\\\n    address public locker;\\\\n    uint256 public totalBonus;\\\\n\\\\n    address public warmupContract;\\\\n    uint256 public warmupPeriod;\\\\n\\\\n    constructor(\\\\n        address _Bash,\\\\n        address _sBash,\\\\n        uint32 _epochLength,\\\\n        uint256 _firstEpochNumber,\\\\n        uint32 _firstEpochTime\\\\n    ) {\\\\n        require(_Bash != address(0));\\\\n        Bash = _Bash;\\\\n        require(_sBash != address(0));\\\\n        sBash = _sBash;\\\\n\\\\n        epoch = Epoch({\\\\n            length: _epochLength,\\\\n            number: _firstEpochNumber,\\\\n            endTime: _firstEpochTime,\\\\n            distribute: 0\\\\n        });\\\\n    }\\\\n\\\\n    struct Claim {\\\\n        uint256 deposit;\\\\n        uint256 gons;\\\\n        uint256 expiry;\\\\n        bool lock; // prevents malicious delays\\\\n    }\\\\n    mapping(address => Claim) public warmupInfo;\\\\n\\\\n    /**\\\\n        @notice stake bash to enter warmup\\\\n        @param _amount uint\\\\n        @return bool\\\\n     */\\\\n    function stake(uint256 _amount, address _recipient)\\\\n        external\\\\n        returns (bool)\\\\n    {\\\\n        rebase();\\\\n\\\\n        IERC20(Bash).safeTransferFrom(msg.sender, address(this), _amount); // Time = Ohm = Bash\\\\n\\\\n        Claim memory info = warmupInfo[_recipient];\\\\n        require(!info.lock, \\\\\\"Deposits for account are locked\\\\\\");\\\\n\\\\n        warmupInfo[_recipient] = Claim({\\\\n            deposit: info.deposit.add(_amount),\\\\n            gons: info.gons.add(IsBash(sBash).gonsForBalance(_amount)),\\\\n            expiry: epoch.number.add(warmupPeriod),\\\\n            lock: false\\\\n        });\\\\n        IERC20(sBash).safeTransfer(warmupContract, _amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n        @notice retrieve sbash from warmup\\\\n        @param _recipient address\\\\n     */\\\\n    function claim(address _recipient) public {\\\\n        Claim memory info = warmupInfo[_recipient];\\\\n        if (epoch.number >= info.expiry && info.expiry != 0) {\\\\n            delete warmupInfo[_recipient];\\\\n            IWarmup(warmupContract).retrieve(\\\\n                _recipient,\\\\n                IsBash(sBash).balanceForGons(info.gons)\\\\n            );\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n        @notice forfeit sbash in warmup and retrieve bash\\\\n     */\\\\n    function forfeit() external {\\\\n        Claim memory info = warmupInfo[msg.sender];\\\\n        delete warmupInfo[msg.sender];\\\\n\\\\n        IWarmup(warmupContract).retrieve(\\\\n            address(this),\\\\n            IsBash(sBash).balanceForGons(info.gons)\\\\n        );\\\\n        IERC20(Bash).safeTransfer(msg.sender, info.deposit);\\\\n    }\\\\n\\\\n    /**\\\\n        @notice prevent new deposits to address (protection from malicious activity)\\\\n     */\\\\n    function toggleDepositLock() external {\\\\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\\\\n    }\\\\n\\\\n    /**\\\\n        @notice redeem sbash for bash\\\\n        @param _amount uint\\\\n        @param _trigger bool\\\\n     */\\\\n    function unstake(uint256 _amount, bool _trigger) external {\\\\n        if (_trigger) {\\\\n            rebase();\\\\n        }\\\\n        IERC20(sBash).safeTransferFrom(msg.sender, address(this), _amount);\\\\n        IERC20(Bash).safeTransfer(msg.sender, _amount);\\\\n    }\\\\n\\\\n    /**\\\\n        @notice returns the sbash index, which tracks rebase growth\\\\n        @return uint\\\\n     */\\\\n    function index() public view returns (uint256) {\\\\n        return IsBash(sBash).index();\\\\n    }\\\\n\\\\n    /**\\\\n        @notice trigger rebase if epoch over\\\\n     */\\\\n    function rebase() public {\\\\n        if (epoch.endTime <= uint32(block.timestamp)) {\\\\n            IsBash(sBash).rebase(epoch.distribute, epoch.number);\\\\n            epoch.endTime = epoch.endTime.add32(epoch.length);\\\\n            epoch.number++;\\\\n\\\\n            if (distributor != address(0)) {\\\\n                IDistributor(distributor).distribute();\\\\n            }\\\\n\\\\n            uint256 balance = contractBalance(); // amount of BASH in contract\\\\n            uint256 staked = IsBash(sBash).circulatingSupply(); // amount of unstaked sbash\\\\n            if (balance <= staked) {\\\\n                epoch.distribute = 0;\\\\n            } else {\\\\n                epoch.distribute = balance.sub(staked);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n        @notice returns contract bash holdings, including bonuses provided\\\\n        @return uint\\\\n     */\\\\n    function contractBalance() public view returns (uint256) {\\\\n        return IERC20(Bash).balanceOf(address(this)).add(totalBonus);\\\\n    }\\\\n\\\\n    /**\\\\n        @notice provide bonus to locked staking contract\\\\n        @param _amount uint\\\\n     */\\\\n    function giveLockBonus(uint256 _amount) external {\\\\n        require(msg.sender == locker);\\\\n        totalBonus = totalBonus.add(_amount);\\\\n        IERC20(sBash).safeTransfer(locker, _amount);\\\\n    }\\\\n\\\\n    /**\\\\n        @notice reclaim bonus from locked staking contract\\\\n        @param _amount uint\\\\n     */\\\\n    function returnLockBonus(uint256 _amount) external {\\\\n        require(msg.sender == locker);\\\\n        totalBonus = totalBonus.sub(_amount);\\\\n        IERC20(sBash).safeTransferFrom(locker, address(this), _amount);\\\\n    }\\\\n\\\\n    enum CONTRACTS {\\\\n        DISTRIBUTOR,\\\\n        WARMUP,\\\\n        LOCKER\\\\n    }\\\\n\\\\n    /**\\\\n        @notice sets the contract address for LP staking\\\\n        @param _contract address\\\\n     */\\\\n    function setContract(CONTRACTS _contract, address _address)\\\\n        external\\\\n        onlyManager\\\\n    {\\\\n        if (_contract == CONTRACTS.DISTRIBUTOR) {\\\\n            // 0\\\\n            distributor = _address;\\\\n        } else if (_contract == CONTRACTS.WARMUP) {\\\\n            // 1\\\\n            require(\\\\n                warmupContract == address(0),\\\\n                \\\\\\"Warmup cannot be set more than once\\\\\\"\\\\n            );\\\\n            warmupContract = _address;\\\\n        } else if (_contract == CONTRACTS.LOCKER) {\\\\n            // 2\\\\n            require(\\\\n                locker == address(0),\\\\n                \\\\\\"Locker cannot be set more than once\\\\\\"\\\\n            );\\\\n            locker = _address;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice set warmup period in epoch\'s numbers for new stakers\\\\n     * @param _warmupPeriod uint\\\\n     */\\\\n    function setWarmup(uint256 _warmupPeriod) external onlyManager {\\\\n        warmupPeriod = _warmupPeriod;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa918192644a17951a3d5287a2c3d0775a760a9433c6980b8913ff8d5e05f89f6\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/interfaces/IDistributor.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\ninterface IDistributor {\\\\n    function distribute() external returns (bool);\\\\n}\\",\\"keccak256\\":\\"0x44a9e3d284f361e3e040c414ec1620c0a81b5cca30b79a9ca27d373ae9af471f\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/interfaces/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the decimals of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount)\\\\n        external\\\\n        returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender)\\\\n        external\\\\n        view\\\\n        returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address sender,\\\\n        address recipient,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(\\\\n        address indexed owner,\\\\n        address indexed spender,\\\\n        uint256 value\\\\n    );\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd9d90b53a116f03e32ade16bdc15c2c058d4164300adbb702fc045e97fce1635\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/interfaces/IOwnable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\ninterface IOwnable {\\\\n    function manager() external view returns (address);\\\\n\\\\n    function renounceManagement() external;\\\\n\\\\n    function pushManagement(address newOwner_) external;\\\\n\\\\n    function pullManagement() external;\\\\n}\\",\\"keccak256\\":\\"0xaf12bf1105c4e0d9d9e8f97e97dffbe6e6116c728086efc38d75e52e7ee0bd96\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/interfaces/IWarmup.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\n\\\\ninterface IWarmup is IERC20 {\\\\n    function retrieve( address staker_, uint amount_ ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa19b81fd67627fcb96b75af97bb74d57295f2bd48853006e5e88c236acd34bbe\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/interfaces/IsBash.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity >=0.7.5;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\n\\\\n// sBash \\\\ninterface IsBash is IERC20 {\\\\n    function rebase( uint256 profit_, uint epoch_) external returns (uint256);\\\\n\\\\n    function circulatingSupply() external view returns (uint256);\\\\n\\\\n    // function balanceOf(address who) external view returns (uint256);\\\\n\\\\n    function gonsForBalance( uint amount ) external view returns ( uint );\\\\n\\\\n    function balanceForGons( uint gons ) external view returns ( uint );\\\\n    \\\\n    function index() external view returns ( uint );\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd01e22ea265173fdbe820beda590646543bed3c0cc2878a83979fb09cbf612d5\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/libraries/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0\\\\npragma solidity ^0.7.5;\\\\n\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies in extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly {\\\\n            size := extcodesize(account)\\\\n        }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard}\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(\\\\n            address(this).balance >= amount,\\\\n            \\\\\\"Address: insufficient balance\\\\\\"\\\\n        );\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(\\\\n            success,\\\\n            \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data)\\\\n        internal\\\\n        returns (bytes memory)\\\\n    {\\\\n        return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return\\\\n            functionCallWithValue(\\\\n                target,\\\\n                data,\\\\n                value,\\\\n                \\\\\\"Address: low-level call with value failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(\\\\n            address(this).balance >= value,\\\\n            \\\\\\"Address: insufficient balance for call\\\\\\"\\\\n        );\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\\\n            data\\\\n        );\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    function _functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 weiValue,\\\\n        string memory errorMessage\\\\n    ) private returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\\\n            data\\\\n        );\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data)\\\\n        internal\\\\n        view\\\\n        returns (bytes memory)\\\\n    {\\\\n        return\\\\n            functionStaticCall(\\\\n                target,\\\\n                data,\\\\n                \\\\\\"Address: low-level static call failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data)\\\\n        internal\\\\n        returns (bytes memory)\\\\n    {\\\\n        return\\\\n            functionDelegateCall(\\\\n                target,\\\\n                data,\\\\n                \\\\\\"Address: low-level delegate call failed\\\\\\"\\\\n            );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    function _verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) private pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function addressToString(address _address)\\\\n        internal\\\\n        pure\\\\n        returns (string memory)\\\\n    {\\\\n        bytes32 _bytes = bytes32(uint256(_address));\\\\n        bytes memory HEX = \\\\\\"0123456789abcdef\\\\\\";\\\\n        bytes memory _addr = new bytes(42);\\\\n\\\\n        _addr[0] = \\\\\\"0\\\\\\";\\\\n        _addr[1] = \\\\\\"x\\\\\\";\\\\n\\\\n        for (uint256 i = 0; i < 20; i++) {\\\\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\\\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\\\n        }\\\\n\\\\n        return string(_addr);\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x9901d68716fabd1de3cec78823eddb6e2f26b4c15a86238c2e9b1c41383d146d\\",\\"license\\":\\"AGPL-3.0\\"},\\"contracts/libraries/SafeERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\nimport {Address} from \\\\\\"../libraries/Address.sol\\\\\\";\\\\nimport {SafeMath} from \\\\\\"../libraries/SafeMath.sol\\\\\\";\\\\nimport {IERC20} from \\\\\\"../interfaces/IERC20.sol\\\\\\";\\\\n\\\\nlibrary SafeERC20 {\\\\n    using SafeMath for uint256;\\\\n    using Address for address;\\\\n\\\\n    function safeTransfer(\\\\n        IERC20 token,\\\\n        address to,\\\\n        uint256 value\\\\n    ) internal {\\\\n        _callOptionalReturn(\\\\n            token,\\\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\\\n        );\\\\n    }\\\\n\\\\n    function safeTransferFrom(\\\\n        IERC20 token,\\\\n        address from,\\\\n        address to,\\\\n        uint256 value\\\\n    ) internal {\\\\n        _callOptionalReturn(\\\\n            token,\\\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Deprecated. This function has issues similar to the ones found in\\\\n     * {IERC20-approve}, and its usage is discouraged.\\\\n     *\\\\n     * Whenever possible, use {safeIncreaseAllowance} and\\\\n     * {safeDecreaseAllowance} instead.\\\\n     */\\\\n    function safeApprove(\\\\n        IERC20 token,\\\\n        address spender,\\\\n        uint256 value\\\\n    ) internal {\\\\n        // safeApprove should only be called when setting an initial allowance,\\\\n        // or when resetting it to zero. To increase and decrease it, use\\\\n        // \'safeIncreaseAllowance\' and \'safeDecreaseAllowance\'\\\\n        // solhint-disable-next-line max-line-length\\\\n        require(\\\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\\\n            \\\\\\"SafeERC20: approve from non-zero to non-zero allowance\\\\\\"\\\\n        );\\\\n        _callOptionalReturn(\\\\n            token,\\\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\\\n        );\\\\n    }\\\\n\\\\n    function safeIncreaseAllowance(\\\\n        IERC20 token,\\\\n        address spender,\\\\n        uint256 value\\\\n    ) internal {\\\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\\\n            value\\\\n        );\\\\n        _callOptionalReturn(\\\\n            token,\\\\n            abi.encodeWithSelector(\\\\n                token.approve.selector,\\\\n                spender,\\\\n                newAllowance\\\\n            )\\\\n        );\\\\n    }\\\\n\\\\n    function safeDecreaseAllowance(\\\\n        IERC20 token,\\\\n        address spender,\\\\n        uint256 value\\\\n    ) internal {\\\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\\\n            value,\\\\n            \\\\\\"SafeERC20: decreased allowance below zero\\\\\\"\\\\n        );\\\\n        _callOptionalReturn(\\\\n            token,\\\\n            abi.encodeWithSelector(\\\\n                token.approve.selector,\\\\n                spender,\\\\n                newAllowance\\\\n            )\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     */\\\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\\\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\\\\n        // we\'re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\\\n        // the target address contains contract code and also asserts for success in the low-level call.\\\\n\\\\n        bytes memory returndata = address(token).functionCall(\\\\n            data,\\\\n            \\\\\\"SafeERC20: low-level call failed\\\\\\"\\\\n        );\\\\n        if (returndata.length > 0) {\\\\n            // Return data is optional\\\\n            // solhint-disable-next-line max-line-length\\\\n            require(\\\\n                abi.decode(returndata, (bool)),\\\\n                \\\\\\"SafeERC20: ERC20 operation did not succeed\\\\\\"\\\\n            );\\\\n        }\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x945ebef0f44607f6740669ab1d5da27503493167d8b768aeba2bd6746488d2c5\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/libraries/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        uint256 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    function add32(uint32 a, uint32 b) internal pure returns (uint32) {\\\\n        uint32 c = a + b;\\\\n        require(c >= a, \\\\\\"SafeMath: addition overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return sub(a, b, \\\\\\"SafeMath: subtraction overflow\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        require(b <= a, errorMessage);\\\\n        uint256 c = a - b;\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n        // benefit is lost if \'b\' is also tested.\\\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n        if (a == 0) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 c = a * b;\\\\n        require(c / a == b, \\\\\\"SafeMath: multiplication overflow\\\\\\");\\\\n\\\\n        return c;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return div(a, b, \\\\\\"SafeMath: division by zero\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(\\\\n        uint256 a,\\\\n        uint256 b,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (uint256) {\\\\n        require(b > 0, errorMessage);\\\\n        uint256 c = a / b;\\\\n        assert(a == b * c + (a % b)); // There is no case in which this doesn\'t hold\\\\n\\\\n        return c;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x2560c4a43b033b5e806bc04f002df3b27a3fcad9200eb7872ec51d60c9cdd2b6\\",\\"license\\":\\"AGPL-3.0-or-later\\"},\\"contracts/types/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: AGPL-3.0-or-later\\\\npragma solidity 0.7.5;\\\\n\\\\nimport \\\\\\"../interfaces/IOwnable.sol\\\\\\";\\\\n\\\\ncontract Ownable is IOwnable {\\\\n    address internal _owner;\\\\n    address internal _newOwner;\\\\n\\\\n    event OwnershipPushed(\\\\n        address indexed previousOwner,\\\\n        address indexed newOwner\\\\n    );\\\\n    event OwnershipPulled(\\\\n        address indexed previousOwner,\\\\n        address indexed newOwner\\\\n    );\\\\n\\\\n    constructor() {\\\\n        _owner = msg.sender;\\\\n        emit OwnershipPushed(address(0), _owner);\\\\n    }\\\\n\\\\n    function manager() public view override returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    modifier onlyManager() {\\\\n        require(_owner == msg.sender, \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    function renounceManagement() public virtual override onlyManager {\\\\n        emit OwnershipPushed(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    function pushManagement(address newOwner_)\\\\n        public\\\\n        virtual\\\\n        override\\\\n        onlyManager\\\\n    {\\\\n        require(\\\\n            newOwner_ != address(0),\\\\n            \\\\\\"Ownable: new owner is the zero address\\\\\\"\\\\n        );\\\\n        emit OwnershipPushed(_owner, newOwner_);\\\\n        _newOwner = newOwner_;\\\\n    }\\\\n\\\\n    function pullManagement() public virtual override {\\\\n        require(msg.sender == _newOwner, \\\\\\"Ownable: must be new owner to pull\\\\\\");\\\\n        emit OwnershipPulled(_owner, _newOwner);\\\\n        _owner = _newOwner;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x41a5f328aaf55ff78f4bfd1f198615a08882b52c9912c87dcb99e1daa9680dea\\",\\"license\\":\\"AGPL-3.0-or-later\\"}},\\"version\\":1}","bytecode":"0x60c060405234801561001057600080fd5b50604051611b76380380611b76833981810160405260a081101561003357600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b031916331780825593519596949592949391926001600160a01b0392909216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908290a36001600160a01b0385166100af57600080fd5b6001600160601b0319606086901b166080526001600160a01b0384166100d457600080fd5b6001600160601b0319606094851b1660a0526040805160808101825283815260006020820181905263ffffffff95861692820183905292909416939094018390526002919091556003556004805464010000000090920263ffffffff60201b1963ffffffff19909316909317919091169190911790555060805160601c60a05160601c6119bc6101ba6000398061044152806105ee52806106e75280610a825280610b8e5280610e565280610ed4528061106452806111a5528061126152806113c1525080610771528061098c5280610d575280610e8b528061136052506119bc6000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638f077b83116100ee578063c9f464ff11610097578063ed4acaa811610071578063ed4acaa8146103d4578063f13e7b01146103dc578063f3d86e4a146103e4578063f62ae76a146103ec576101a3565b8063c9f464ff146103a7578063d7b96d4e146103c4578063deac361a146103cc576101a3565b8063a8dd07dc116100c8578063a8dd07dc1461038f578063af14052c14610397578063bfe109281461039f576101a3565b80638f077b831461032e578063900cf0cf146103365780639ebea88c1461036a576101a3565b8063481c6a75116101505780637acb77571161012a5780637acb7757146102b7578063865e6fd3146102f75780638b7afe2e14610326576101a3565b8063481c6a75146102595780635a96ac0a146102615780636746f4c214610269576101a3565b80632986c0e5116101815780632986c0e5146101f55780633c4e6da71461020f57806346f68ee914610233576101a3565b806303c23670146101a8578063089208d8146101c75780631e83409a146101cf575b600080fd5b6101c5600480360360208110156101be57600080fd5b5035610409565b005b6101c561046d565b6101c5600480360360208110156101e557600080fd5b50356001600160a01b0316610516565b6101fd6106e3565b60408051918252519081900360200190f35b61021761076f565b604080516001600160a01b039092168252519081900360200190f35b6101c56004803603602081101561024957600080fd5b50356001600160a01b0316610793565b610217610892565b6101c56108a1565b61028f6004803603602081101561027f57600080fd5b50356001600160a01b031661094b565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102e3600480360360408110156102cd57600080fd5b50803590602001356001600160a01b0316610975565b604080519115158252519081900360200190f35b6101c56004803603604081101561030d57600080fd5b50803560ff1690602001356001600160a01b0316610bc1565b6101fd610d4d565b6101c5610df9565b61033e610e1d565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b6101c56004803603604081101561038057600080fd5b50803590602001351515610e3b565b6101fd610eb2565b6101c5610eb8565b61021761110c565b6101c5600480360360208110156103bd57600080fd5b503561111b565b61021761117f565b6101fd61118e565b610217611194565b6102176111a3565b6101c56111c7565b6101c56004803603602081101561040257600080fd5b5035611389565b6006546001600160a01b0316331461042057600080fd5b60075461042d90826113eb565b60075560065461046a906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361144c565b50565b6000546001600160a01b031633146104cc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b61051e6118a4565b506001600160a01b0381166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028082015493830184905260039091015460ff1615156060830152549091118015906105835750604081015115155b156106df576001600160a01b038083166000908152600a602090815260408083208381556001810184905560028101939093556003909201805460ff19169055600854848201518351637965d56d60e01b8152600481019190915292519084169363c3a2a6659387937f000000000000000000000000000000000000000000000000000000000000000090921692637965d56d92602480840193919291829003018186803b15801561063457600080fd5b505afa158015610648573d6000803e3d6000fd5b505050506040513d602081101561065e57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050505b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561073e57600080fd5b505afa158015610752573d6000803e3d6000fd5b505050506040513d602081101561076857600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146107f2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108375760405162461bcd60e51b81526004018080602001828103825260268152602001806118f26026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6001546001600160a01b031633146108ea5760405162461bcd60e51b815260040180806020018281038252602281526020018061193b6022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b600a6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b600061097f610eb8565b6109b46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866114b8565b6109bc6118a4565b506001600160a01b0382166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161580156060830152610a5f576040805162461bcd60e51b815260206004820152601f60248201527f4465706f7369747320666f72206163636f756e7420617265206c6f636b656400604482015290519081900360640190fd5b604080516080810190915281518190610a7890876113eb565b8152602001610b1b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bd39674886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d6020811015610b0e57600080fd5b50516020850151906113eb565b8152600954600254602090920191610b32916113eb565b8152600060209182018190526001600160a01b038681168252600a8352604091829020845181559284015160018401559083015160028301556060909201516003909101805460ff1916911515919091179055600854610bb7917f0000000000000000000000000000000000000000000000000000000000000000811691168661144c565b5060019392505050565b6000546001600160a01b03163314610c20576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000826002811115610c2e57fe5b1415610c5457600580546001600160a01b0319166001600160a01b0383161790556106df565b6001826002811115610c6257fe5b1415610cd0576008546001600160a01b031615610cb05760405162461bcd60e51b81526004018080602001828103825260238152602001806119186023913960400191505060405180910390fd5b600880546001600160a01b0319166001600160a01b0383161790556106df565b6002826002811115610cde57fe5b14156106df576006546001600160a01b031615610d2c5760405162461bcd60e51b81526004018080602001828103825260238152602001806118cf6023913960400191505060405180910390fd5b600680546001600160a01b0383166001600160a01b03199091161790555050565b6000610df46007547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610dc257600080fd5b505afa158015610dd6573d6000803e3d6000fd5b505050506040513d6020811015610dec57600080fd5b5051906113eb565b905090565b336000908152600a60205260409020600301805460ff19811660ff90911615179055565b60025460035460045463ffffffff8082169164010000000090041684565b8015610e4957610e49610eb8565b610e7e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856114b8565b6106df6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338461144c565b60075481565b60045463ffffffff428116640100000000909204161161110a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663058ecdb46002600101546002600001546040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b158015610f4a57600080fd5b505af1158015610f5e573d6000803e3d6000fd5b505050506040513d6020811015610f7457600080fd5b5050600454610f969063ffffffff640100000000820481169181169061152d16565b6004805463ffffffff929092166401000000000267ffffffff00000000199092169190911790556002805460010190556005546001600160a01b03161561105457600560009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561102757600080fd5b505af115801561103b573d6000803e3d6000fd5b505050506040513d602081101561105157600080fd5b50505b600061105e610d4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639358928b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bb57600080fd5b505afa1580156110cf573d6000803e3d6000fd5b505050506040513d60208110156110e557600080fd5b505190508082116110fa5760006003556106df565b6111048282611590565b60035550505b565b6005546001600160a01b031681565b6000546001600160a01b0316331461117a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600955565b6006546001600160a01b031681565b60095481565b6008546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6111cf6118a4565b50336000818152600a602081815260408084208151608081018352815481526001820180548286019081526002840180548487015260038501805460ff8116151560608701529a8a5297875293889055908790559590915560ff1990951690925560085492518251637965d56d60e01b8152600481019190915291516001600160a01b039384169363c3a2a6659330937f000000000000000000000000000000000000000000000000000000000000000090921692637965d56d92602480840193919291829003018186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d60208110156112d157600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b5050825161046a92506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169150339061144c565b6006546001600160a01b031633146113a057600080fd5b6007546113ad9082611590565b60075560065461046a906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911630846114b8565b600082820183811015611445576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526114b39084906115d2565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526115279085906115d2565b50505050565b600082820163ffffffff8085169082161015611445576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061144583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611683565b6060611627826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661171a9092919063ffffffff16565b8051909150156114b35780806020019051602081101561164657600080fd5b50516114b35760405162461bcd60e51b815260040180806020018281038252602a81526020018061195d602a913960400191505060405180910390fd5b600081848411156117125760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116d75781810151838201526020016116bf565b50505050905090810190601f1680156117045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606117298484600085611731565b949350505050565b606061173c8561189e565b61178d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106117cc5780518252601f1990920191602091820191016117ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461182e576040519150601f19603f3d011682016040523d82523d6000602084013e611833565b606091505b509150915081156118475791506117299050565b8051156118575780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156116d75781810151838201526020016116bf565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600015158152509056fe4c6f636b65722063616e6e6f7420626520736574206d6f7265207468616e206f6e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735761726d75702063616e6e6f7420626520736574206d6f7265207468616e206f6e63654f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203cb4b8cf7f1353aa66ff686eaa595ec5915a02cbdbd351f58e5823da55999d6164736f6c63430007050033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80638f077b83116100ee578063c9f464ff11610097578063ed4acaa811610071578063ed4acaa8146103d4578063f13e7b01146103dc578063f3d86e4a146103e4578063f62ae76a146103ec576101a3565b8063c9f464ff146103a7578063d7b96d4e146103c4578063deac361a146103cc576101a3565b8063a8dd07dc116100c8578063a8dd07dc1461038f578063af14052c14610397578063bfe109281461039f576101a3565b80638f077b831461032e578063900cf0cf146103365780639ebea88c1461036a576101a3565b8063481c6a75116101505780637acb77571161012a5780637acb7757146102b7578063865e6fd3146102f75780638b7afe2e14610326576101a3565b8063481c6a75146102595780635a96ac0a146102615780636746f4c214610269576101a3565b80632986c0e5116101815780632986c0e5146101f55780633c4e6da71461020f57806346f68ee914610233576101a3565b806303c23670146101a8578063089208d8146101c75780631e83409a146101cf575b600080fd5b6101c5600480360360208110156101be57600080fd5b5035610409565b005b6101c561046d565b6101c5600480360360208110156101e557600080fd5b50356001600160a01b0316610516565b6101fd6106e3565b60408051918252519081900360200190f35b61021761076f565b604080516001600160a01b039092168252519081900360200190f35b6101c56004803603602081101561024957600080fd5b50356001600160a01b0316610793565b610217610892565b6101c56108a1565b61028f6004803603602081101561027f57600080fd5b50356001600160a01b031661094b565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102e3600480360360408110156102cd57600080fd5b50803590602001356001600160a01b0316610975565b604080519115158252519081900360200190f35b6101c56004803603604081101561030d57600080fd5b50803560ff1690602001356001600160a01b0316610bc1565b6101fd610d4d565b6101c5610df9565b61033e610e1d565b60408051948552602085019390935263ffffffff91821684840152166060830152519081900360800190f35b6101c56004803603604081101561038057600080fd5b50803590602001351515610e3b565b6101fd610eb2565b6101c5610eb8565b61021761110c565b6101c5600480360360208110156103bd57600080fd5b503561111b565b61021761117f565b6101fd61118e565b610217611194565b6102176111a3565b6101c56111c7565b6101c56004803603602081101561040257600080fd5b5035611389565b6006546001600160a01b0316331461042057600080fd5b60075461042d90826113eb565b60075560065461046a906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361144c565b50565b6000546001600160a01b031633146104cc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba908390a3600080546001600160a01b0319169055565b61051e6118a4565b506001600160a01b0381166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028082015493830184905260039091015460ff1615156060830152549091118015906105835750604081015115155b156106df576001600160a01b038083166000908152600a602090815260408083208381556001810184905560028101939093556003909201805460ff19169055600854848201518351637965d56d60e01b8152600481019190915292519084169363c3a2a6659387937f000000000000000000000000000000000000000000000000000000000000000090921692637965d56d92602480840193919291829003018186803b15801561063457600080fd5b505afa158015610648573d6000803e3d6000fd5b505050506040513d602081101561065e57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050505b5050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632986c0e56040518163ffffffff1660e01b815260040160206040518083038186803b15801561073e57600080fd5b505afa158015610752573d6000803e3d6000fd5b505050506040513d602081101561076857600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b031633146107f2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108375760405162461bcd60e51b81526004018080602001828103825260268152602001806118f26026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917fea8258f2d9ddb679928cf34b78cf645b7feda9acc828e4dd82d014eaae270eba91a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6001546001600160a01b031633146108ea5760405162461bcd60e51b815260040180806020018281038252602281526020018061193b6022913960400191505060405180910390fd5b600154600080546040516001600160a01b0393841693909116917faa151555690c956fc3ea32f106bb9f119b5237a061eaa8557cff3e51e3792c8d91a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b600a6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b600061097f610eb8565b6109b46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866114b8565b6109bc6118a4565b506001600160a01b0382166000908152600a602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161580156060830152610a5f576040805162461bcd60e51b815260206004820152601f60248201527f4465706f7369747320666f72206163636f756e7420617265206c6f636b656400604482015290519081900360640190fd5b604080516080810190915281518190610a7890876113eb565b8152602001610b1b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631bd39674886040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ae457600080fd5b505afa158015610af8573d6000803e3d6000fd5b505050506040513d6020811015610b0e57600080fd5b50516020850151906113eb565b8152600954600254602090920191610b32916113eb565b8152600060209182018190526001600160a01b038681168252600a8352604091829020845181559284015160018401559083015160028301556060909201516003909101805460ff1916911515919091179055600854610bb7917f0000000000000000000000000000000000000000000000000000000000000000811691168661144c565b5060019392505050565b6000546001600160a01b03163314610c20576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000826002811115610c2e57fe5b1415610c5457600580546001600160a01b0319166001600160a01b0383161790556106df565b6001826002811115610c6257fe5b1415610cd0576008546001600160a01b031615610cb05760405162461bcd60e51b81526004018080602001828103825260238152602001806119186023913960400191505060405180910390fd5b600880546001600160a01b0319166001600160a01b0383161790556106df565b6002826002811115610cde57fe5b14156106df576006546001600160a01b031615610d2c5760405162461bcd60e51b81526004018080602001828103825260238152602001806118cf6023913960400191505060405180910390fd5b600680546001600160a01b0383166001600160a01b03199091161790555050565b6000610df46007547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610dc257600080fd5b505afa158015610dd6573d6000803e3d6000fd5b505050506040513d6020811015610dec57600080fd5b5051906113eb565b905090565b336000908152600a60205260409020600301805460ff19811660ff90911615179055565b60025460035460045463ffffffff8082169164010000000090041684565b8015610e4957610e49610eb8565b610e7e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856114b8565b6106df6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016338461144c565b60075481565b60045463ffffffff428116640100000000909204161161110a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663058ecdb46002600101546002600001546040518363ffffffff1660e01b81526004018083815260200182815260200192505050602060405180830381600087803b158015610f4a57600080fd5b505af1158015610f5e573d6000803e3d6000fd5b505050506040513d6020811015610f7457600080fd5b5050600454610f969063ffffffff640100000000820481169181169061152d16565b6004805463ffffffff929092166401000000000267ffffffff00000000199092169190911790556002805460010190556005546001600160a01b03161561105457600560009054906101000a90046001600160a01b03166001600160a01b031663e4fc6b6d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561102757600080fd5b505af115801561103b573d6000803e3d6000fd5b505050506040513d602081101561105157600080fd5b50505b600061105e610d4d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639358928b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110bb57600080fd5b505afa1580156110cf573d6000803e3d6000fd5b505050506040513d60208110156110e557600080fd5b505190508082116110fa5760006003556106df565b6111048282611590565b60035550505b565b6005546001600160a01b031681565b6000546001600160a01b0316331461117a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600955565b6006546001600160a01b031681565b60095481565b6008546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6111cf6118a4565b50336000818152600a602081815260408084208151608081018352815481526001820180548286019081526002840180548487015260038501805460ff8116151560608701529a8a5297875293889055908790559590915560ff1990951690925560085492518251637965d56d60e01b8152600481019190915291516001600160a01b039384169363c3a2a6659330937f000000000000000000000000000000000000000000000000000000000000000090921692637965d56d92602480840193919291829003018186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d60208110156112d157600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039093166004840152602483019190915251604480830192600092919082900301818387803b15801561133957600080fd5b505af115801561134d573d6000803e3d6000fd5b5050825161046a92506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169150339061144c565b6006546001600160a01b031633146113a057600080fd5b6007546113ad9082611590565b60075560065461046a906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911630846114b8565b600082820183811015611445576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526114b39084906115d2565b505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526115279085906115d2565b50505050565b600082820163ffffffff8085169082161015611445576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061144583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611683565b6060611627826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661171a9092919063ffffffff16565b8051909150156114b35780806020019051602081101561164657600080fd5b50516114b35760405162461bcd60e51b815260040180806020018281038252602a81526020018061195d602a913960400191505060405180910390fd5b600081848411156117125760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156116d75781810151838201526020016116bf565b50505050905090810190601f1680156117045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60606117298484600085611731565b949350505050565b606061173c8561189e565b61178d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106117cc5780518252601f1990920191602091820191016117ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461182e576040519150601f19603f3d011682016040523d82523d6000602084013e611833565b606091505b509150915081156118475791506117299050565b8051156118575780518082602001fd5b60405162461bcd60e51b81526020600482018181528651602484015286518793919283926044019190850190808383600083156116d75781810151838201526020016116bf565b3b151590565b6040518060800160405280600081526020016000815260200160008152602001600015158152509056fe4c6f636b65722063616e6e6f7420626520736574206d6f7265207468616e206f6e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735761726d75702063616e6e6f7420626520736574206d6f7265207468616e206f6e63654f776e61626c653a206d757374206265206e6577206f776e657220746f2070756c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212203cb4b8cf7f1353aa66ff686eaa595ec5915a02cbdbd351f58e5823da55999d6164736f6c63430007050033","devdoc":{"kind":"dev","methods":{"claim(address)":{"params":{"_recipient":"address"}},"contractBalance()":{"returns":{"_0":"uint"}},"giveLockBonus(uint256)":{"params":{"_amount":"uint"}},"index()":{"returns":{"_0":"uint"}},"returnLockBonus(uint256)":{"params":{"_amount":"uint"}},"setContract(uint8,address)":{"params":{"_contract":"address"}},"setWarmup(uint256)":{"params":{"_warmupPeriod":"uint"}},"stake(uint256,address)":{"params":{"_amount":"uint"},"returns":{"_0":"bool"}},"unstake(uint256,bool)":{"params":{"_amount":"uint","_trigger":"bool"}}},"version":1},"userdoc":{"kind":"user","methods":{"claim(address)":{"notice":"retrieve sbash from warmup"},"contractBalance()":{"notice":"returns contract bash holdings, including bonuses provided"},"forfeit()":{"notice":"forfeit sbash in warmup and retrieve bash"},"giveLockBonus(uint256)":{"notice":"provide bonus to locked staking contract"},"index()":{"notice":"returns the sbash index, which tracks rebase growth"},"rebase()":{"notice":"trigger rebase if epoch over"},"returnLockBonus(uint256)":{"notice":"reclaim bonus from locked staking contract"},"setContract(uint8,address)":{"notice":"sets the contract address for LP staking"},"setWarmup(uint256)":{"notice":"set warmup period in epoch\'s numbers for new stakers"},"stake(uint256,address)":{"notice":"stake bash to enter warmup"},"toggleDepositLock()":{"notice":"prevent new deposits to address (protection from malicious activity)"},"unstake(uint256,bool)":{"notice":"redeem sbash for bash"}},"version":1},"storageLayout":{"storage":[{"astId":20012,"contract":"contracts/Staking.sol:ATBASHStaking","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":20014,"contract":"contracts/Staking.sol:ATBASHStaking","label":"_newOwner","offset":0,"slot":"1","type":"t_address"},{"astId":12117,"contract":"contracts/Staking.sol:ATBASHStaking","label":"epoch","offset":0,"slot":"2","type":"t_struct(Epoch)12115_storage"},{"astId":12119,"contract":"contracts/Staking.sol:ATBASHStaking","label":"distributor","offset":0,"slot":"5","type":"t_address"},{"astId":12121,"contract":"contracts/Staking.sol:ATBASHStaking","label":"locker","offset":0,"slot":"6","type":"t_address"},{"astId":12123,"contract":"contracts/Staking.sol:ATBASHStaking","label":"totalBonus","offset":0,"slot":"7","type":"t_uint256"},{"astId":12125,"contract":"contracts/Staking.sol:ATBASHStaking","label":"warmupContract","offset":0,"slot":"8","type":"t_address"},{"astId":12127,"contract":"contracts/Staking.sol:ATBASHStaking","label":"warmupPeriod","offset":0,"slot":"9","type":"t_uint256"},{"astId":12189,"contract":"contracts/Staking.sol:ATBASHStaking","label":"warmupInfo","offset":0,"slot":"10","type":"t_mapping(t_address,t_struct(Claim)12185_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_struct(Claim)12185_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ATBASHStaking.Claim)","numberOfBytes":"32","value":"t_struct(Claim)12185_storage"},"t_struct(Claim)12185_storage":{"encoding":"inplace","label":"struct ATBASHStaking.Claim","members":[{"astId":12178,"contract":"contracts/Staking.sol:ATBASHStaking","label":"deposit","offset":0,"slot":"0","type":"t_uint256"},{"astId":12180,"contract":"contracts/Staking.sol:ATBASHStaking","label":"gons","offset":0,"slot":"1","type":"t_uint256"},{"astId":12182,"contract":"contracts/Staking.sol:ATBASHStaking","label":"expiry","offset":0,"slot":"2","type":"t_uint256"},{"astId":12184,"contract":"contracts/Staking.sol:ATBASHStaking","label":"lock","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_struct(Epoch)12115_storage":{"encoding":"inplace","label":"struct ATBASHStaking.Epoch","members":[{"astId":12108,"contract":"contracts/Staking.sol:ATBASHStaking","label":"number","offset":0,"slot":"0","type":"t_uint256"},{"astId":12110,"contract":"contracts/Staking.sol:ATBASHStaking","label":"distribute","offset":0,"slot":"1","type":"t_uint256"},{"astId":12112,"contract":"contracts/Staking.sol:ATBASHStaking","label":"length","offset":0,"slot":"2","type":"t_uint32"},{"astId":12114,"contract":"contracts/Staking.sol:ATBASHStaking","label":"endTime","offset":4,"slot":"2","type":"t_uint32"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}}}')}}]);
//# sourceMappingURL=47.2bb31447.chunk.js.map